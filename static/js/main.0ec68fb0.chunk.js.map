{"version":3,"sources":["components/Header.js","components/Form.js","components/Load.js","components/Detail.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","placeName","useState","Date","time","setTime","useEffect","updateTime","setInterval","className","toLocaleTimeString","Form","geocode","search","setSearch","query","setQuery","onSubmit","e","preventDefault","type","name","value","placeholder","onChange","target","Load","loadingIcon","color","height","width","Detail","temp","desc","humid","pop","wind","feel","icon","isLoading","styleIcon","size","animate","content","toFixed","Footer","App","setPlaceName","setTemp","setDesc","humidity","setHumidity","setPOP","setWind","setFeel","setIcon","setIsLoading","location","a","fetch","response","json","data","latitude","features","center","longitude","text","forecast","currently","temperature","summary","precipProbability","windSpeed","apparentTemperature","replace","toUpperCase","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPA4BeA,EA1BA,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EAERC,mBAAS,IAAIC,MAFL,mBAEzBC,EAFyB,KAEnBC,EAFmB,KAKhCC,oBAAU,WACRC,KACC,CAACH,IAGJ,IAAMG,EAAa,WACjBC,YAAY,WACVH,EAAQ,IAAIF,OACX,MAIL,OACE,yBAAKM,UAAU,QACb,2CACA,4BAAKR,GACL,4BAAKG,EAAKM,sBAHZ,MCYWC,EA9BF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAEAV,mBAAS,IAFT,mBAErBW,EAFqB,KAEbC,EAFa,OAGFZ,mBAAS,IAHP,mBAGrBa,EAHqB,KAGdC,EAHc,KAK5BV,oBAAU,WACRM,EAAQG,IACP,CAACA,IAQJ,OACE,0BAAME,SAPa,SAACC,GACpBA,EAAEC,iBACFH,EAASH,GACTC,EAAU,KAIoBL,UAAU,eACtC,2BACEA,UAAU,aACVW,KAAK,OACLC,KAAK,WACLC,MAAOT,EACPU,YAAY,oBACZC,SAAU,SAAAN,GAAC,OAAIJ,EAAUI,EAAEO,OAAOH,UAEpC,4BAAQF,KAAK,SAASX,UAAU,OAAhC,kB,gCCTSiB,G,MAdF,WACX,IAAMC,EACE,YADFA,EAEG,UAFHA,EAGI,IAHJA,EAIG,IAET,OACE,yBAAKlB,UAAU,aACb,kBAAC,IAAD,CAAQW,KAAMO,EAAkBC,MAAOD,EAAmBE,OAAQF,EAAoBG,MAAOH,OC2BpFI,EApCA,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,IAAKC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACpDC,EAAY,CAChBF,OACAV,MAAO,UACPa,KAAM,GACNC,SAAS,GAGPC,EAAUJ,GAAa,yBAAK9B,UAAU,kBAAiB,kBAAC,EAAD,OAyB3D,OAvBK8B,GAAaN,IAChBU,EACE,yBAAKlC,UAAU,kBACb,yBAAKA,UAAU,aACb,4BAAKuB,EAAL,UACA,kBAAC,IAAD,CACEM,KAAME,EAAUF,KAChBV,MAAOY,EAAUZ,MACjBa,KAAMD,EAAUC,KAChBC,QAASF,EAAUE,WAGvB,4BAAKT,GACL,4BACE,sCAAYC,EAAMU,QAAQ,GAA1B,KACA,oCAAUT,EAAV,KACA,qCAAWC,EAAX,QACA,2CAAiBC,EAAjB,aAMDM,GC3BME,EARA,WACb,OACE,4BAAQpC,UAAU,eAChB,0EC+DSqC,G,MAzDH,WAAO,IAAD,EAEkB5C,mBAAS,IAF3B,mBAETD,EAFS,KAEE8C,EAFF,OAGQ7C,mBAAS,GAHjB,mBAGT8B,EAHS,KAGHgB,EAHG,OAIQ9C,mBAAS,IAJjB,mBAIT+B,EAJS,KAIHgB,EAJG,OAKgB/C,mBAAS,GALzB,mBAKTgD,EALS,KAKCC,EALD,OAMMjD,mBAAS,GANf,mBAMTiC,EANS,KAMJiB,EANI,OAOQlD,mBAAS,GAPjB,mBAOTkC,EAPS,KAOHiB,EAPG,OAQQnD,mBAAS,GARjB,mBAQTmC,EARS,KAQHiB,EARG,OASQpD,mBAAS,IATjB,mBASToC,EATS,KASHiB,EATG,OAUkBrD,oBAAS,GAV3B,mBAUTqC,EAVS,KAUEiB,EAVF,KAYV5C,EAAO,sCAAG,WAAO6C,GAAP,qBAAAC,EAAA,yDACXD,EADW,wBAEZD,GAAa,GAFD,SAGWG,MAAM,qDAAD,OAAsDF,EAAtD,sCAnBb,kGAgBH,cAGNG,EAHM,gBAIOA,EAASC,OAJhB,OAINC,EAJM,OAKNC,EAAWD,EAAKE,SAAS,GAAGC,OAAO,GACnCC,EAAYJ,EAAKE,SAAS,GAAGC,OAAO,GAC1ClB,EAAae,EAAKE,SAAS,GAAGG,MAC9BC,EAASL,EAAUG,GARP,QAUdV,GAAa,GAVC,0CAAH,sDAaPY,EAAQ,sCAAG,WAAOL,EAAUG,GAAjB,iBAAAR,EAAA,qEACQC,MAAM,GAAD,OA5BlB,uCA4BkB,4CA7BhB,mCA6BgB,YAAwDI,EAAxD,YAAoEG,IADjF,cACTN,EADS,gBAEIA,EAASC,OAFb,OAETC,EAFS,OAGfd,EAAQc,EAAKO,UAAUC,aACvBrB,EAAQa,EAAKO,UAAUE,SACvBpB,EAAsC,IAA1BW,EAAKO,UAAUnB,UAC3BE,EAA0C,IAAnCU,EAAKO,UAAUG,mBACtBnB,EAAQS,EAAKO,UAAUI,WACvBnB,EAAQQ,EAAKO,UAAUK,qBACvBnB,EAAQO,EAAKO,UAAU/B,KAAKqC,QAAQ,KAAM,KAAKC,eAC/CpB,GAAa,GAVE,0CAAH,wDAad,OACE,yBAAK/C,UAAU,WACb,kBAAC,EAAD,CAAQR,UAAWA,IACnB,kBAAC,EAAD,CAAMW,QAASA,IACf,kBAAC,EAAD,CACEoB,KAAMA,EACNC,KAAMA,EACNC,MAAOgB,EACPf,IAAKA,EACLC,KAAMA,EACNC,KAAMA,EACNC,KAAMA,EACNC,UAAWA,IAEb,kBAAC,EAAD,SCnDcsC,QACW,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.0ec68fb0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst Header = ({ placeName }) => {\r\n  \r\n  const [time, setTime] = useState(new Date()) // define time according to user's system clock\r\n\r\n  // Wait for time to load then re-render time every one second => time is a dependency\r\n  useEffect(() => {\r\n    updateTime()\r\n  }, [time])\r\n\r\n  // Function to update time every one second\r\n  const updateTime = () => {\r\n    setInterval(() => {\r\n      setTime(new Date())\r\n    }, 1000)\r\n    \r\n  }\r\n\r\n  return (\r\n    <div className=\"hero\">\r\n      <h1>Weather App</h1>\r\n      <h1>{placeName}</h1>\r\n      <h1>{time.toLocaleTimeString()}</h1> {/*display time as hh:mm:ss - am/pm string*/}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst Form = ({ geocode }) => {\r\n  \r\n  const [search, setSearch] = useState('')\r\n  const [query, setQuery] = useState('')\r\n\r\n  useEffect(() => {\r\n    geocode(query)\r\n  }, [query])\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    setQuery(search)\r\n    setSearch('')\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"search-form\">\r\n      <input \r\n        className=\"search-box\"\r\n        type=\"text\"\r\n        name=\"location\"\r\n        value={search}\r\n        placeholder=\"Enter Location...\"\r\n        onChange={e => setSearch(e.target.value)}  \r\n      />\r\n      <button type=\"submit\" className=\"btn\">Get weather!</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nconst Load = () => {\r\n  const loadingIcon = {\r\n    type: \"ThreeDots\",\r\n    color: \"#db4f7a\",\r\n    height: 100,\r\n    width: 100\r\n  }\r\n  return (\r\n    <div className=\"load-icon\">\r\n      <Loader type={loadingIcon.type} color={loadingIcon.color} height={loadingIcon.height} width={loadingIcon.width} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Load;\r\n","import React from \"react\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\nimport Load from './Load'\r\n\r\nconst Detail = ({ temp, desc, humid, pop, wind, feel, icon, isLoading }) => {\r\n  const styleIcon = {\r\n    icon,\r\n    color: \"#fee140\",\r\n    size: 72,\r\n    animate: true\r\n  };\r\n\r\n  let content = isLoading && <div className=\"display-detail\"><Load /></div>\r\n\r\n  if (!isLoading && desc) {\r\n    content = (\r\n      <div className=\"display-detail\">\r\n        <div className=\"temp-icon\">\r\n          <h3>{temp}&#8457;</h3>\r\n          <ReactAnimatedWeather\r\n            icon={styleIcon.icon}\r\n            color={styleIcon.color}\r\n            size={styleIcon.size}\r\n            animate={styleIcon.animate}\r\n          />\r\n        </div>\r\n        <h4>{desc}</h4>\r\n        <ul>\r\n          <li>Humid: {humid.toFixed(1)}%</li>\r\n          <li>POP: {pop}%</li>\r\n          <li>Wind: {wind} mph</li>\r\n          <li>Feels like: {feel}&#8457;</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return content;\r\n};\r\n\r\nexport default Detail;\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer-text\">\r\n      <span>&copy; Weather App by Khoi Nguyen - 2019</span>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React, {useState} from 'react';\r\nimport Header from './components/Header'\r\nimport Form from './components/Form'\r\nimport Detail from './components/Detail'\r\nimport Footer from './components/Footer'\r\nimport './App.css'\r\n\r\nconst ACCESS_TOKEN = 'pk.eyJ1IjoibWlzdXRpbmVrbyIsImEiOiJjanphajZ2NzQwMTVvM2J0aDg2MXZueTF3In0.pTNnGLqr6WvhFghmiiHJdA'\r\nconst API_KEY = '4b24129feacca9b38aac8f2021b82534'\r\nconst proxy = 'https://cors-anywhere.herokuapp.com/'\r\n\r\nconst App = () => {\r\n  \r\n  const [placeName, setPlaceName] = useState('')\r\n  const [temp, setTemp] = useState(0)\r\n  const [desc, setDesc] = useState('')\r\n  const [humidity, setHumidity] = useState(0)\r\n  const [pop, setPOP] = useState(0)\r\n  const [wind, setWind] = useState(0)\r\n  const [feel, setFeel] = useState(0)\r\n  const [icon, setIcon] = useState('')\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const geocode = async (location) => {\r\n    if(location) {\r\n      setIsLoading(true)\r\n      const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${location}.json?limit=1&access_token=${ACCESS_TOKEN}`)\r\n      const data = await response.json()\r\n      const latitude = data.features[0].center[1]\r\n      const longitude = data.features[0].center[0]\r\n      setPlaceName(data.features[0].text)\r\n      forecast(latitude, longitude)\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const forecast = async (latitude, longitude) => {\r\n    const response = await fetch(`${proxy}https://api.darksky.net/forecast/${API_KEY}/${latitude},${longitude}`)\r\n    const data = await response.json()\r\n    setTemp(data.currently.temperature)\r\n    setDesc(data.currently.summary)\r\n    setHumidity(data.currently.humidity * 100)\r\n    setPOP(data.currently.precipProbability * 100)\r\n    setWind(data.currently.windSpeed)\r\n    setFeel(data.currently.apparentTemperature)\r\n    setIcon(data.currently.icon.replace(/-/g, \"_\").toUpperCase())\r\n    setIsLoading(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Header placeName={placeName}/>\r\n      <Form geocode={geocode}/>\r\n      <Detail \r\n        temp={temp}\r\n        desc={desc}\r\n        humid={humidity}\r\n        pop={pop}\r\n        wind={wind}\r\n        feel={feel}\r\n        icon={icon}\r\n        isLoading={isLoading}\r\n      />\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}